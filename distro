#!/bin/bash
#
# The "u2up-yocto" project build tool
#
# Copyright (C) 2017-2018 Samo Pogacnik <samo_pogacnik@t-2.net>
# All rights reserved.
#
# This file is part of the "u2up-yocto" software project.
# This file is provided under the terms of the BSD 3-Clause license,
# available in the LICENSE file of the "automk" software project.
#
#set -x
#set -e

function usage_help ()
{
	echo "Usage: "$(basename  $0)" [MACHINE COMMAND] [OPTIONS]"
	echo " MACHINE := qemux86|intel-corei7-64|raspberrypi3-64|..."
	echo " COMMAND := prepare|build|bbsh"
	echo " OPTIONS := {--help|-h}"
	echo
	return
}

pre="$(basename  $0)-u2up: "
U2UP_OPTIONS=""
U2UP_COMMAND=""

U2UP_MACHINE=${1}
shift

if [ -z "$U2UP_MACHINE" ]; then
	echo $pre"ERROR - Missing MACHINE!"
	echo
	usage_help
	exit 1
fi

#echo "U2UP_MACHINE=${U2UP_MACHINE}"
U2UP_MACHINE_PREFIX=${U2UP_MACHINE//-/_}
#echo "U2UP_MACHINE_PREFIX=${U2UP_MACHINE_PREFIX}"

source distro-conf/u2up-conf

source distro-conf/machines-conf

U2UP_BSP_LAYER_NAME_var=${U2UP_MACHINE_PREFIX}_BSP_LAYER_NAME
U2UP_BSP_LAYER_NAME=${!U2UP_BSP_LAYER_NAME_var}
#echo "U2UP_BSP_LAYER_NAME=${U2UP_BSP_LAYER_NAME}"

U2UP_MACH_var=${U2UP_MACHINE_PREFIX}_MACH
U2UP_MACH=${!U2UP_MACH_var}
#echo "U2UP_MACH=${U2UP_MACH}"

U2UP_MACH_BRANCH_var=${U2UP_MACHINE_PREFIX}_MACH_BRANCH
U2UP_MACH_BRANCH=${!U2UP_MACH_BRANCH_var}
#echo "U2UP_MACH_BRANCH=${U2UP_MACH_BRANCH}"

U2UP_MACH_REPO_URL_var=${U2UP_MACHINE_PREFIX}_MACH_REPO_URL
U2UP_MACH_REPO_URL=${!U2UP_MACH_REPO_URL_var}
#echo "U2UP_MACH_REPO_URL=${U2UP_MACH_REPO_URL}"

if [ -z "${U2UP_BSP_LAYER_NAME}" ] && [ "${U2UP_MACHINE/#qemu/}" = "${U2UP_MACHINE}" ]; then
	echo $pre"ERROR - Unknown MACHINE (check: distro-conf/machines-conf)!"
	echo
	usage_help
	exit 1
fi

while [[ $# > 0 ]]
do
	case $1 in
	prepare|build|bbsh)
		if [ -n "$U2UP_MACHINE" ] && [ -z "$U2UP_COMMAND" ]; then
			U2UP_COMMAND=$1
		else
			echo $pre"ERROR - Wrong syntax!"
			echo
			usage_help
			exit 1
		fi
		;;
	--help|-h)
		usage_help
		exit 0 
		;;
	*)
		echo $pre"ERROR - Unknown option: "$1
		echo
		usage_help
		exit 1
		;;
	esac
	shift # to the next token, if any
done

if [ -z "$U2UP_COMMAND" ]; then
	echo $pre"ERROR - Missing COMMAND!"
	echo
	usage_help
	exit 1
fi

WDIR=$(dirname $0)
pushd $WDIR &> /dev/null

# Check downloads mirror!
function check_downloads ()
{
	if [ ! -d "$U2UP_DOWNLOADS" ]; then
		return 1
	fi
	return 0
}

# Check subdir!
function check_subdir ()
{
	ret=1
	SUBTREE=$1
	BRANCH=$2

	# Check if no args (first arg empty) - dummy check; not an error:
	if [ -z "$SUBTREE" ]; then
		echo $pre"Path: NONE - already provired by Poky!"
		return 0
	fi

	# Chech second arg (if first arg exists, the second has to exist too):
	if [ -z "$BRANCH" ]; then
		echo $pre"ERROR - check_subdir () Missing second (BRANCH) param!"
		return $ret
	fi

	echo $pre"Path: ${SUBTREE}_${BRANCH}"
	if [ -d "${SUBTREE}_${BRANCH}" ]; then
		pushd ${SUBTREE}_${BRANCH} &> /dev/null
		git checkout $BRANCH &> /dev/null
		ret=$?
		popd &> /dev/null
		if [ $ret -ne 0 ]; then
			echo $pre"ERROR - check_subdir () Git branch test checkout error - Remove: ${SUBTREE}_${BRANCH}!"
			rm -rf ${SUBTREE}_$BRANCH
		else
			if [ ! -f "${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz" ]; then
				echo $pre"Archiving \"${SUBTREE}_${BRANCH}\" into \"${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz\"!"
				tar czf ${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz ${SUBTREE}_$BRANCH
				if [ $? -ne 0 ]; then
					echo $pre"WARNING - prepare failed (tar czf: ${SUBTREE}_${BRANCH} subdir not archived)!"
					echo
				fi
			fi
		fi
	fi
	return $ret 
}

# Prepare subdir!
function prepare_subdir ()
{
	ret=1
	SUBTREE=$1
	BRANCH=$2
	REPO_URL=$3

	# Check if no args (first arg empty) - dummy check; not an error:
	if [ -z "$SUBTREE" ]; then
		return 0
	fi

	if [ -z "$BRANCH" ] || [ -z "$REPO_URL" ]; then
		echo $pre"ERROR - check_subdir () Invalid params!"
		return $ret
	fi

	echo $pre"Preparing \"${SUBTREE}_${BRANCH}\" subdir (from \"$REPO_URL\")!"
	if [ ! -d "${SUBTREE}" ] && [ ! -d "${SUBTREE}_${BRANCH}" ]; then
		if [ -f "${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz" ]; then
			echo $pre"Extracting \"${SUBTREE}\" from \"${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz\"!"
			tar xzf ${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz
			ret=$?
			if [ $ret -ne 0 ]; then
				echo $pre"ERROR - prepare failed (tar xzf: ${SUBTREE}_${BRANCH} subdir not ok)!"
				echo
			fi
		else
			git clone --single-branch -b $BRANCH $REPO_URL ${SUBTREE}_$BRANCH
			ret=$?
			if [ $ret -ne 0 ]; then
				echo $pre"ERROR - prepare failed (git clone: ${SUBTREE}_${BRANCH} subdir not ok)!"
				echo
			else
				check_subdir $SUBTREE $BRANCH
				ret=$?
			fi
		fi
		if [ $ret -ne 0 ]; then
			rm -rf ${SUBTREE}_${BRANCH}
		fi
	else
		check_subdir $SUBTREE $BRANCH
		ret=$?
	fi
	return $ret
}

# Generate buildir!
function generate_buildir ()
{
	ret=1
	MACH_NAME=$1
	MACH_LAYER=$2
	MACH_BRANCH=$3

	# Check if no args (first arg empty) - error:
	if [ -z "$MACH_NAME" ]; then
		echo $pre"generate_buildir: ERROR - unspecified machine!"
		return $ret
	fi

	# Check if empty layer name - not an error (it's qemu...):
	if [ -z "$MACH_LAYER" ]; then
		MACH_BRANCH=$U2UP_POKY_BRANCH
	fi

	#echo "MACH_NAME=${MACH_NAME}"
	#echo "MACH_LAYER=${MACH_LAYER}"
	#echo "MACH_BRANCH=${MACH_BRANCH}"

	MACH_BUILDIR="${U2UP_DIR}/build.${MACH_NAME}_${U2UP_POKY_BRANCH}"
	echo $pre"Build directory: ${MACH_BUILDIR}"
	mkdir -p ${MACH_BUILDIR}/conf
	echo "# THIS IS GENERATED FILE - DO NOT MAKE CHANGES HERE!" > ${MACH_BUILDIR}/conf/local.conf
	cat ${U2UP_DIR}/conf/build_local.conf_template >> ${MACH_BUILDIR}/conf/local.conf
	echo "MACHINE ??= \"${MACH_NAME}\"" >> ${MACH_BUILDIR}/conf/local.conf
	cp -p ${U2UP_DIR}/conf/templateconf.cfg ${MACH_BUILDIR}/conf/
	echo "# THIS IS GENERATED FILE - DO NOT MAKE CHANGES HERE!" > ${MACH_BUILDIR}/conf/bblayers.conf
	cat ${U2UP_DIR}/conf/build_bblayers.conf_template >> ${MACH_BUILDIR}/conf/bblayers.conf
	if [ -n "$MACH_LAYER" ]; then
		echo "  \${YOCTODIR}/${MACH_LAYER}_${MACH_BRANCH} \\" >> ${MACH_BUILDIR}/conf/bblayers.conf
	fi
	echo "  \"" >> ${MACH_BUILDIR}/conf/bblayers.conf

	ret=0
	return $ret
}

# Prepare tree for specific machine!
function prepare_machine ()
{
	ret=1

	check_downloads
	ret=$?
	if [ $ret -ne 0 ]; then
		echo $pre"Creating fresh \"${U2UP_DOWNLOADS}\" directory!"
		mkdir -p $U2UP_DOWNLOADS
	fi

	echo $pre"Prepare yocto poky reference for \"${U2UP_MACHINE}\"!"
	check_subdir $U2UP_POKY $U2UP_POKY_BRANCH
	ret=$?
	if [ $ret -ne 0 ]; then
		prepare_subdir $U2UP_POKY $U2UP_POKY_BRANCH $U2UP_POKY_REPO_URL
		ret=$?
		if [ $ret -ne 0 ]; then
			echo $pre"ERROR - Failed!"
			echo
			return $ret
		fi
	fi

	echo $pre"Prepare machine layer for \"${U2UP_MACHINE}\"!"
	check_subdir $U2UP_MACH $U2UP_MACH_BRANCH
	ret=$?
	if [ $ret -ne 0 ]; then
		prepare_subdir $U2UP_MACH $U2UP_MACH_BRANCH $U2UP_MACH_REPO_URL
		ret=$?
	fi

	echo $pre"Prepare build tree for \"${U2UP_MACHINE}\"!"
	generate_buildir $U2UP_MACHINE $U2UP_MACH $U2UP_MACH_BRANCH
	ret=$?
	if [ $ret -ne 0 ]; then
		echo $pre"ERROR - Failed!"
		echo
		return $ret
	fi

	if [ $ret -eq 0 ]; then
		echo $pre"Done OK!"
	fi
	return $ret
}

# Build image for specific machine!
function build_machine ()
{
	ret=1

	prepare_machine
	ret=$?
	if [ $ret -ne 0 ]; then
		echo $pre"ERROR - Project prepare machine FAILED!"
		echo
		return $ret
	fi

	echo $pre"Setting build environment for \"${U2UP_MACHINE}\"!"
	source ${U2UP_POKY}_${U2UP_POKY_BRANCH}/oe-init-build-env ${U2UP_DIR}/build.${U2UP_MACHINE}_${U2UP_POKY_BRANCH}

	export YOCTO_BRANCH="${U2UP_POKY_BRANCH}"
	export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE YOCTO_BRANCH"

	if [ -n "${1}" ] && [ "${1}" == "bbsh" ]; then
		echo $pre"Entering U2UP bitbake shell for \"${U2UP_MACHINE}\"!"
		env PS1="${pre}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ " bash --norc -i
	else
		echo $pre"Building U2UP image for \"${U2UP_MACHINE}\"!"
		bitbake u2up-image-full-cmdline
	fi
	ret=$?
	if [ $ret -eq 0 ]; then
		echo $pre"Done OK!"
	fi
	return $ret
}

# Execute command!
ret=1
case $U2UP_COMMAND in
prepare)
	prepare_machine
	ret=$?
	;;
build|bbsh)
	build_machine $U2UP_COMMAND
	ret=$?
	;;
esac

exit $ret

