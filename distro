#!/bin/bash
#
# The "u2up-yocto" project build tool
#
# Copyright (C) 2017-2018 Samo Pogacnik <samo_pogacnik@t-2.net>
# All rights reserved.
#
# This file is part of the "u2up-yocto" software project.
# This file is provided under the terms of the BSD 3-Clause license,
# available in the LICENSE file of the "automk" software project.
#
#set -x
#set -e

function usage_help ()
{
	echo "Usage: "$(basename  $0)" [MACHINE COMMAND] [OPTIONS]"
	echo " MACHINE := qemux86|intel-corei7-64|raspberrypi3-64|..."
	echo " COMMAND := prepare|bbsh|bitbake [args]"
	echo " OPTIONS := {--help|-h}"
	echo
	return
}

pre="$(basename  $0)-u2up: "
U2UP_OPTIONS=""
U2UP_COMMAND=""
U2UP_MACHINE=""

while [[ $# > 0 ]]
do
	case $1 in
	prepare|bbsh|bitbake)
		if [ -n "$U2UP_MACHINE" ] && [ -z "$U2UP_COMMAND" ]; then
			U2UP_COMMAND=$1
		else
			echo $pre"ERROR - Wrong syntax!"
			echo
			usage_help
			exit 1
		fi
		;;
	--help|-h)
		usage_help
		exit 0
		;;
	*)
		if [ -z "$U2UP_MACHINE" ]; then
			U2UP_MACHINE=$1
		else
			if [ "x$U2UP_COMMAND" != "xbitbake" ]; then
				echo $pre"ERROR - Unknown option: "$1
				echo
				usage_help
				exit 1
			else
				break 1
			fi
		fi
		;;
	esac
	shift # to the next token, if any
done

if [ -z "$U2UP_COMMAND" ]; then
	echo $pre"ERROR - Missing COMMAND!"
	echo
	usage_help
	exit 1
fi

if [ -z "$U2UP_MACHINE" ]; then
	echo $pre"ERROR - Missing MACHINE!"
	echo
	usage_help
	exit 1
fi

#echo "U2UP_MACHINE=${U2UP_MACHINE}"
U2UP_MACHINE_PREFIX=${U2UP_MACHINE//-/_}
#echo "U2UP_MACHINE_PREFIX=${U2UP_MACHINE_PREFIX}"

U2UP_REPOS_DIR="repos"
source distro-conf/repos-conf
U2UP_POKY_REPO_NAME="${poky_REPO_NAME}"
#echo "U2UP_POKY_REPO_NAME=${U2UP_POKY_REPO_NAME}"
U2UP_POKY_REPO_URL="${poky_REPO_URL}"
#echo "U2UP_POKY_REPO_URL=${U2UP_POKY_REPO_URL}"
U2UP_POKY_REPO_BRANCH="${poky_REPO_BRANCH}"
#echo "U2UP_POKY_REPO_BRANCH=${U2UP_POKY_REPO_BRANCH}"
U2UP_POKY_REPO_VERSION="${poky_REPO_VERSION}"
#echo "U2UP_POKY_REPO_VERSION=${U2UP_POKY_REPO_VERSION}"

source distro-conf/u2up-conf
U2UP_DOWNLOADS="${U2UP_YOCTO_SHARED}/downloads"

source distro-conf/machines-conf

U2UP_MACH_LAYER_NAME_var=${U2UP_MACHINE_PREFIX}_MACH_LAYER_NAME
U2UP_MACH_LAYER_NAME=${!U2UP_MACH_LAYER_NAME_var}
echo "U2UP_MACH_LAYER_NAME=${U2UP_MACH_LAYER_NAME}"

U2UP_MACH_LAYER_PATH_var=${U2UP_MACHINE_PREFIX}_MACH_LAYER_PATH
U2UP_MACH_LAYER_PATH=${!U2UP_MACH_LAYER_PATH_var}
echo "U2UP_MACH_LAYER_PATH=${U2UP_MACH_LAYER_PATH}"

U2UP_MACH_LAYER_PREFIX=${U2UP_MACH_LAYER_NAME//-/_}
echo "U2UP_MACH_LAYER_PREFIX=${U2UP_MACH_LAYER_PREFIX}"

U2UP_MACH_REPO_URL_var=${U2UP_MACH_LAYER_PREFIX}_REPO_URL
U2UP_MACH_REPO_URL=${!U2UP_MACH_REPO_URL_var}
echo "U2UP_MACH_REPO_URL=${U2UP_MACH_REPO_URL}"

U2UP_MACH_REPO_BRANCH_var=${U2UP_MACH_LAYER_PREFIX}_REPO_BRANCH
echo "U2UP_MACH_REPO_BRANCH_var=${U2UP_MACH_REPO_BRANCH_var}"
U2UP_MACH_REPO_BRANCH=${!U2UP_MACH_REPO_BRANCH_var}
echo "U2UP_MACH_REPO_BRANCH=${U2UP_MACH_REPO_BRANCH}"

U2UP_MACH_REPO_VERSION_var=${U2UP_MACH_LAYER_PREFIX}_REPO_VERSION
U2UP_MACH_REPO_VERSION=${!U2UP_MACH_REPO_VERSION_var}
echo "U2UP_MACH_REPO_VERSION=${U2UP_MACH_REPO_VERSION}"
echo

if [ -z "${U2UP_MACH_LAYER_NAME}" ] && [ "${U2UP_MACHINE/#qemu/}" = "${U2UP_MACHINE}" ]; then
	echo $pre"ERROR - Unknown MACHINE (check: distro-conf/machines-conf)!"
	echo
	usage_help
	exit 1
fi

if [ ! -e "distro-conf/layers-conf" ]; then
	echo $pre"ERROR - Missing file distro-conf/layers-conf!"
	echo
	exit 1
fi
source distro-conf/layers-conf
if [ -z "${U2UP_BASE_LAYERS}" ]; then
	echo $pre"ERROR - No layers enabled in distro-conf/layers-conf!"
	echo
	exit 1
fi

if [ -e "distro-conf/extras-conf" ]; then
	source distro-conf/extras-conf
	if [ -z "${U2UP_EXTRA_LAYERS}" ]; then
		echo $pre"WARNING - distro-conf/extras-conf exists, but no extra layers defined!"
		echo
	fi
fi

WDIR=$(dirname $0)
pushd $WDIR &> /dev/null

# Check downloads mirror!
function check_downloads ()
{
	if [ ! -d "$U2UP_DOWNLOADS" ]; then
		return 1
	fi
	return 0
}

# Check subdir!
function check_subdir ()
{
	ret=1
	SUBTREE=$1
	BRANCH=$2

	# Check if no args (first arg empty) - dummy check; not an error:
	if [ -z "$SUBTREE" ]; then
		echo $pre"Path: NONE - already provired by Poky!"
		return 0
	fi

	# Check second arg (if first arg exists, the second has to exist too):
	if [ -z "$BRANCH" ]; then
		echo $pre"ERROR - check_subdir () Missing second (BRANCH) param!"
		return $ret
	fi

	# Check presence of the U2UP_REPOS_DIR (if not presend; then create):
	if [ ! -d "${U2UP_REPOS_DIR}" ]; then
		mkdir -p $U2UP_REPOS_DIR
	fi

	echo $pre"Path: ${U2UP_REPOS_DIR}/${SUBTREE}_${BRANCH}"
	if [ -d "${U2UP_REPOS_DIR}/${SUBTREE}_${BRANCH}" ]; then
		pushd ${U2UP_REPOS_DIR}/${SUBTREE}_${BRANCH} &> /dev/null
		git checkout $BRANCH &> /dev/null
		ret=$?
		popd &> /dev/null
		if [ $ret -ne 0 ]; then
			echo $pre"ERROR - check_subdir () Git branch test checkout error - Remove: ${U2UP_REPOS_DIR}/${SUBTREE}_${BRANCH}!"
			rm -rf ${U2UP_REPOS_DIR}/${SUBTREE}_$BRANCH
		else
			if [ ! -f "${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz" ]; then
				echo $pre"Archiving \"${SUBTREE}_${BRANCH}\" into \"${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz\"!"
				pushd ${U2UP_REPOS_DIR} &> /dev/null
				tar czf ${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz ${SUBTREE}_$BRANCH
				if [ $? -ne 0 ]; then
					echo $pre"WARNING - prepare failed (tar czf: ${SUBTREE}_${BRANCH} subdir not archived)!"
					echo
				fi
				popd &> /dev/null
			fi
		fi
	fi
	return $ret 
}

# Prepare subdir!
function prepare_subdir ()
{
	ret=1
	SUBTREE=$1
	BRANCH=$2
	REPO_URL=$3

	# Check if no args (first arg empty) - dummy check; not an error:
	if [ -z "$SUBTREE" ]; then
		return 0
	fi

	if [ -z "$BRANCH" ] || [ -z "$REPO_URL" ]; then
		echo $pre"ERROR - check_subdir () Invalid params!"
		return $ret
	fi

	# Check presence of the U2UP_REPOS_DIR (if not presend; then create):
	if [ ! -d "${U2UP_REPOS_DIR}" ]; then
		mkdir -p $U2UP_REPOS_DIR
	fi

	echo $pre"Preparing \"${U2UP_REPOS_DIR}/${SUBTREE}_${BRANCH}\" subdir (from \"$REPO_URL\")!"
	pushd ${U2UP_REPOS_DIR} &> /dev/null
	if [ ! -d "${SUBTREE}" ] && [ ! -d "${SUBTREE}_${BRANCH}" ]; then
		if [ -f "${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz" ]; then
			echo $pre"Extracting \"${SUBTREE}\" from \"${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz\"!"
			tar xzf ${U2UP_DOWNLOADS}/${SUBTREE}_${BRANCH}_git.tar.gz
			ret=$?
			if [ $ret -ne 0 ]; then
				echo $pre"ERROR - prepare failed (tar xzf: ${SUBTREE}_${BRANCH} subdir not ok)!"
				echo
			fi
		else
			git clone --single-branch -b $BRANCH $REPO_URL ${SUBTREE}_$BRANCH
			ret=$?
			if [ $ret -ne 0 ]; then
				echo $pre"ERROR - prepare failed (git clone: ${SUBTREE}_${BRANCH} subdir not ok)!"
				echo
			else
				check_subdir $SUBTREE $BRANCH
				ret=$?
			fi
		fi
		if [ $ret -ne 0 ]; then
			rm -rf ${SUBTREE}_${BRANCH}
		fi
	else
		check_subdir $SUBTREE $BRANCH
		ret=$?
	fi
	popd &> /dev/null
	return $ret
}

# Add to generated bblayers.conf!
function add_bblayers ()
{
	LAYERS_LIST=${!1}
	BBLAYERS_CONF=$2

	if [ -z "LAYERS_LIST" ] || [ -z "BBLAYERS_CONF" ]; then
		echo $pre"Missing parameters"
		return 1
	fi

	for name in ${LAYERS_LIST}; do
		echo
		echo "name=${name}"
		name_prefix=${name//-/_}
		echo "name_prefix=${name_prefix}"
		name_layer_path_var=${name_prefix}_LAYER_PATH
		echo "name_layer_path_var=${name_layer_path_var}"
		name_layer_path=${!name_layer_path_var}
		echo "name_layer_path=${name_layer_path}"
		echo "  \${YOCTODIR}/${name_layer_path} \\" >> ${BBLAYERS_CONF}
	done
	return 0
}

# Generate buildir!
function generate_buildir ()
{
	ret=1
	MACH_NAME=$1
	MACH_LAYER=$2
	MACH_BRANCH=$3

	# Check if no args (first arg empty) - error:
	if [ -z "$MACH_NAME" ]; then
		echo $pre"generate_buildir: ERROR - unspecified machine!"
		return $ret
	fi

	# Check if empty layer name - not an error (it's qemu...):
	if [ -z "$MACH_LAYER" ]; then
		MACH_BRANCH=$U2UP_POKY_REPO_BRANCH
	fi

	#echo "MACH_NAME=${MACH_NAME}"
	#echo "MACH_LAYER=${MACH_LAYER}"
	#echo "MACH_BRANCH=${MACH_BRANCH}"

	MACH_BUILDIR="${U2UP_DIR}/build.${MACH_NAME}_${U2UP_POKY_REPO_BRANCH}"
	echo $pre"Build directory: ${MACH_BUILDIR}"
	mkdir -p ${MACH_BUILDIR}/conf
	echo "# THIS IS GENERATED FILE - DO NOT MAKE CHANGES HERE!" > ${MACH_BUILDIR}/conf/local.conf
	cat ${U2UP_DIR}/conf/build_local.conf_template >> ${MACH_BUILDIR}/conf/local.conf
	echo "MACHINE ??= \"${MACH_NAME}\"" >> ${MACH_BUILDIR}/conf/local.conf
	cp -p ${U2UP_DIR}/conf/templateconf.cfg ${MACH_BUILDIR}/conf/
	echo "# THIS IS GENERATED FILE - DO NOT MAKE CHANGES HERE!" > ${MACH_BUILDIR}/conf/bblayers.conf
	cat ${U2UP_DIR}/conf/build_bblayers.conf_template >> ${MACH_BUILDIR}/conf/bblayers.conf
	add_bblayers U2UP_BASE_LAYERS ${MACH_BUILDIR}/conf/bblayers.conf
	if [ -n "${U2UP_EXTRA_LAYERS}" ]; then
		add_bblayers U2UP_EXTRA_LAYERS ${MACH_BUILDIR}/conf/bblayers.conf
	fi
	if [ -n "$MACH_LAYER" ]; then
		echo "  \${YOCTODIR}/${U2UP_REPOS_DIR}/${MACH_LAYER}_${MACH_BRANCH} \\" >> ${MACH_BUILDIR}/conf/bblayers.conf
	fi
	echo "  \"" >> ${MACH_BUILDIR}/conf/bblayers.conf

	ret=0
	return $ret
}

# Prepare tree for the required layers!
function prepare_layers ()
{
	ret=1
	LAYERS_LIST=${!1}

	if [ -z "LAYERS_LIST" ]; then
		echo $pre"ERROR: Empty layers list!"
		return 1
	fi

	for name in ${LAYERS_LIST}; do
		echo
#		echo "name=${name}"
		name_prefix=${name//-/_}
#		echo "name_prefix=${name_prefix}"
		name_layer_repo_var=${name_prefix}_LAYER_REPO
#		echo "name_layer_repo_var=${name_layer_repo_var}"
		name_layer_repo=${!name_layer_repo_var}
#		echo "name_layer_repo=${name_layer_repo}"
		name_layer_path_var=${name_prefix}_LAYER_PATH
#		echo "name_layer_path_var=${name_layer_path_var}"
		name_layer_path=${!name_layer_path_var}
#		echo "name_layer_path=${name_layer_path}"

		echo $pre"Prepare repo \"${name_layer_repo}\" for layer \"${name}\""
#		echo
		repo_prefix=${name_layer_repo//-/_}
#		echo "repo_prefix=${repo_prefix}"
		repo_url_var=${repo_prefix}_REPO_URL
#		echo "repo_url_var=${repo_url_var}"
		repo_url=${!repo_url_var}
#		echo "repo_url=${repo_url}"
		repo_branch_var=${repo_prefix}_REPO_BRANCH
#		echo "repo_branch_var=${repo_branch_var}"
		repo_branch=${!repo_branch_var}
#		echo "repo_branch=${repo_branch}"
		check_subdir $name_layer_repo $repo_branch
		ret=$?
		if [ $ret -ne 0 ]; then
			prepare_subdir $name_layer_repo $repo_branch $repo_url
			ret=$?
				if [ $ret -ne 0 ]; then
				echo $pre"ERROR - Failed!"
				echo
				return $ret
			fi
		fi
		if [ -d "${name_layer_path}" ]; then
			echo $pre"Prepared ${name} layer path: ${name_layer_path}"
		else
			echo $pre"Missing ${name} layer path: ${name_layer_path}"
			return 1
		fi
	done

	return 0
}

# Prepare tree for specific machine!
function prepare_machine ()
{
	ret=1

	check_downloads
	ret=$?
	if [ $ret -ne 0 ]; then
		echo $pre"Creating fresh \"${U2UP_DOWNLOADS}\" directory!"
		mkdir -p $U2UP_DOWNLOADS
	fi

	echo $pre"Prepare base layers for \"${U2UP_MACHINE}\"!"
	prepare_layers U2UP_BASE_LAYERS
#exit 1
#	echo $pre"Prepare yocto poky reference for \"${U2UP_MACHINE}\"!"
#	check_subdir $U2UP_POKY_REPO_NAME $U2UP_POKY_REPO_BRANCH
#	ret=$?
#	if [ $ret -ne 0 ]; then
#		prepare_subdir $U2UP_POKY_REPO_NAME $U2UP_POKY_REPO_BRANCH $U2UP_POKY_REPO_URL
#		ret=$?
#		if [ $ret -ne 0 ]; then
#			echo $pre"ERROR - Failed!"
#			echo
#			return $ret
#		fi
#	fi

	echo $pre"Prepare machine layer for \"${U2UP_MACHINE}\"!"
	check_subdir $U2UP_MACH_LAYER_NAME $U2UP_MACH_REPO_BRANCH
	ret=$?
	if [ $ret -ne 0 ]; then
		prepare_subdir $U2UP_MACH_LAYER_NAME $U2UP_MACH_REPO_BRANCH $U2UP_MACH_REPO_URL
		ret=$?
	fi

	echo $pre"Prepare build tree for \"${U2UP_MACHINE}\"!"
	generate_buildir $U2UP_MACHINE $U2UP_MACH_LAYER_NAME $U2UP_MACH_REPO_BRANCH
	ret=$?
	if [ $ret -ne 0 ]; then
		echo $pre"ERROR - Failed!"
		echo
		return $ret
	fi

	if [ $ret -eq 0 ]; then
		echo $pre"Done OK!"
	fi
	return $ret
}

# Build image for specific machine!
function build_machine ()
{
	ret=1

	prepare_machine
	ret=$?
	if [ $ret -ne 0 ]; then
		echo $pre"ERROR - Project prepare machine FAILED!"
		echo
		return $ret
	fi

	echo $pre"Setting build environment for \"${U2UP_MACHINE}\"!"
	source ${U2UP_REPOS_DIR}/${U2UP_POKY_REPO_NAME}_${U2UP_POKY_REPO_BRANCH}/oe-init-build-env ${U2UP_DIR}/build.${U2UP_MACHINE}_${U2UP_POKY_REPO_BRANCH}

	export U2UP_REPOS_DIR
	export U2UP_POKY_REPO_BRANCH
	export U2UP_YOCTO_SHARED
	export U2UP_MACH_BUILDIR="${MACH_BUILDIR}"
	export BB_ENV_EXTRAWHITE="$BB_ENV_EXTRAWHITE U2UP_REPOS_DIR U2UP_POKY_REPO_BRANCH U2UP_YOCTO_SHARED U2UP_MACH_BUILDIR"
	echo $pre"BB_ENV_EXTRAWHITE=${BB_ENV_EXTRAWHITE}"
	echo $pre"U2UP_REPOS_DIR=${U2UP_REPOS_DIR}"
	echo $pre"U2UP_POKY_REPO_BRANCH=${U2UP_POKY_REPO_BRANCH}"
	echo $pre"U2UP_YOCTO_SHARED=${U2UP_YOCTO_SHARED}"
	echo $pre"U2UP_MACH_BUILDIR=${U2UP_MACH_BUILDIR}"

	if [ -n "${1}" ] && [ "${1}" == "bbsh" ]; then
		echo $pre"Entering U2UP bitbake shell for \"${U2UP_MACHINE}\"!"
		env PS1="bbsh|\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ " bash --norc -i
	else
		if [ -z "${2}" ]; then
			echo $pre"Run default bitbake command for \"${U2UP_MACHINE}\" - u2up-image-full-cmdline!"
			bitbake u2up-image-full-cmdline
		else
			echo $pre"Run $@ command for \"${U2UP_MACHINE}\"!"
			$@
		fi
	fi
	ret=$?
	if [ $ret -eq 0 ]; then
		echo $pre"Done OK!"
	fi
	return $ret
}

# Execute command!
ret=1
case $U2UP_COMMAND in
prepare)
	prepare_machine
	ret=$?
	;;
bbsh|bitbake)
	build_machine $U2UP_COMMAND $@
	ret=$?
	;;
esac

exit $ret

